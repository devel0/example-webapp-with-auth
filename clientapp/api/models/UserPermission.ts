/* tslint:disable */
/* eslint-disable */
/**
 * ExampleWebApp API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * 
 * ChangeUserRoles (Change another user roles.)
 * 
 * CreateAdminUser (Can create another user with "admin" role.)
 * 
 * CreateAdvancedUser (Can create another user with "advanced" role.)
 * 
 * CreateNormalUser (Can create another user with "normal" role.)
 * 
 * ChangeOwnEmail (Change its own email (without need to validate).)
 * 
 * ChangeOwnPassword (Change its own password (by reset).)
 * 
 * ChangeNormalUserEmail (Change email of another user which max role is "normal".)
 * 
 * ChangeAdvancedUserEmail (Change email of another user which max role is "advanced".)
 * 
 * ChangeAdminUserEmail (Change email of another user which max role is "admin".)
 * 
 * ResetNormalUserPassword (Reset password of another user which max role is "normal".)
 * 
 * ResetAdvancedUserPassword (Reset password of another user which max role is "advanced".)
 * 
 * ResetAdminUserPassword (Reset password of another user which max role is "normal".)
 * 
 * LockoutAdminUser (Edit lockout of another user which max role is "admin".)
 * 
 * LockoutAdvancedUser (Edit lockout of another user which max role is "advanced".)
 * 
 * LockoutNormalUser (Edit lockout of another user which max role is "normal".)
 * @export
 */
export const UserPermission = {
    ChangeUserRoles: 'ChangeUserRoles',
    CreateAdminUser: 'CreateAdminUser',
    CreateAdvancedUser: 'CreateAdvancedUser',
    CreateNormalUser: 'CreateNormalUser',
    ChangeOwnEmail: 'ChangeOwnEmail',
    ChangeOwnPassword: 'ChangeOwnPassword',
    ChangeNormalUserEmail: 'ChangeNormalUserEmail',
    ChangeAdvancedUserEmail: 'ChangeAdvancedUserEmail',
    ChangeAdminUserEmail: 'ChangeAdminUserEmail',
    ResetNormalUserPassword: 'ResetNormalUserPassword',
    ResetAdvancedUserPassword: 'ResetAdvancedUserPassword',
    ResetAdminUserPassword: 'ResetAdminUserPassword',
    LockoutAdminUser: 'LockoutAdminUser',
    LockoutAdvancedUser: 'LockoutAdvancedUser',
    LockoutNormalUser: 'LockoutNormalUser'
} as const;
export type UserPermission = typeof UserPermission[keyof typeof UserPermission];


export function instanceOfUserPermission(value: any): boolean {
    for (const key in UserPermission) {
        if (Object.prototype.hasOwnProperty.call(UserPermission, key)) {
            if ((UserPermission as Record<string, UserPermission>)[key] === value) {
                return true;
            }
        }
    }
    return false;
}

export function UserPermissionFromJSON(json: any): UserPermission {
    return UserPermissionFromJSONTyped(json, false);
}

export function UserPermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPermission {
    return json as UserPermission;
}

export function UserPermissionToJSON(value?: UserPermission | null): any {
    return value as any;
}

