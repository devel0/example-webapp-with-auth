/* tslint:disable */
/* eslint-disable */
/**
 * ExampleWebApp API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrentUserResponseDto,
  EditUserRequestDto,
  LockoutUserRequestDto,
  LoginRequestDto,
  LoginResponseDto,
  RegisterUserRequestDto,
  RegisterUserResponseDto,
  SetUserRolesRequestDto,
  SetUserRolesResponseDto,
  UserListItemResponseDto,
} from '../models/index';
import {
    CurrentUserResponseDtoFromJSON,
    CurrentUserResponseDtoToJSON,
    EditUserRequestDtoFromJSON,
    EditUserRequestDtoToJSON,
    LockoutUserRequestDtoFromJSON,
    LockoutUserRequestDtoToJSON,
    LoginRequestDtoFromJSON,
    LoginRequestDtoToJSON,
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    RegisterUserRequestDtoFromJSON,
    RegisterUserRequestDtoToJSON,
    RegisterUserResponseDtoFromJSON,
    RegisterUserResponseDtoToJSON,
    SetUserRolesRequestDtoFromJSON,
    SetUserRolesRequestDtoToJSON,
    SetUserRolesResponseDtoFromJSON,
    SetUserRolesResponseDtoToJSON,
    UserListItemResponseDtoFromJSON,
    UserListItemResponseDtoToJSON,
} from '../models/index';

export interface ApiAuthEditUserPostRequest {
    editUserRequestDto?: EditUserRequestDto;
}

export interface ApiAuthListUsersGetRequest {
    username?: string;
}

export interface ApiAuthLockoutUserPostRequest {
    lockoutUserRequestDto?: LockoutUserRequestDto;
}

export interface ApiAuthLoginPostRequest {
    loginRequestDto?: LoginRequestDto;
}

export interface ApiAuthRegisterUserPostRequest {
    registerUserRequestDto?: RegisterUserRequestDto;
}

export interface ApiAuthSetUserRolesPostRequest {
    setUserRolesRequestDto?: SetUserRolesRequestDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Retrieve current logged in user name, email, roles.
     */
    async apiAuthCurrentUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentUserResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Auth/CurrentUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Retrieve current logged in user name, email, roles.
     */
    async apiAuthCurrentUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentUserResponseDto> {
        const response = await this.apiAuthCurrentUserGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Edit user data
     */
    async apiAuthEditUserPostRaw(requestParameters: ApiAuthEditUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Auth/EditUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditUserRequestDtoToJSON(requestParameters['editUserRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit user data
     */
    async apiAuthEditUserPost(requestParameters: ApiAuthEditUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthEditUserPostRaw(requestParameters, initOverrides);
    }

    /**
     * List all roles.
     */
    async apiAuthListRolesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Auth/ListRoles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all roles.
     */
    async apiAuthListRolesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiAuthListRolesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all users or specific if param given.
     */
    async apiAuthListUsersGetRaw(requestParameters: ApiAuthListUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserListItemResponseDto>>> {
        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Auth/ListUsers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserListItemResponseDtoFromJSON));
    }

    /**
     * List all users or specific if param given.
     */
    async apiAuthListUsersGet(requestParameters: ApiAuthListUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserListItemResponseDto>> {
        const response = await this.apiAuthListUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Immediate user lockout until given time or unlock if time is in the past ( UTC ).  Note that this happens when access token expires.
     */
    async apiAuthLockoutUserPostRaw(requestParameters: ApiAuthLockoutUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Auth/LockoutUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LockoutUserRequestDtoToJSON(requestParameters['lockoutUserRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Immediate user lockout until given time or unlock if time is in the past ( UTC ).  Note that this happens when access token expires.
     */
    async apiAuthLockoutUserPost(requestParameters: ApiAuthLockoutUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthLockoutUserPostRaw(requestParameters, initOverrides);
    }

    /**
     * Login user by given username or email and auth password.
     */
    async apiAuthLoginPostRaw(requestParameters: ApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Auth/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestDtoToJSON(requestParameters['loginRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     * Login user by given username or email and auth password.
     */
    async apiAuthLoginPost(requestParameters: ApiAuthLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDto> {
        const response = await this.apiAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout current user.
     */
    async apiAuthLogoutGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Auth/Logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout current user.
     */
    async apiAuthLogoutGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthLogoutGetRaw(initOverrides);
    }

    /**
     * Create user by given username, email, password.
     */
    async apiAuthRegisterUserPostRaw(requestParameters: ApiAuthRegisterUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterUserResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Auth/RegisterUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserRequestDtoToJSON(requestParameters['registerUserRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterUserResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create user by given username, email, password.
     */
    async apiAuthRegisterUserPost(requestParameters: ApiAuthRegisterUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterUserResponseDto> {
        const response = await this.apiAuthRegisterUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change user roles
     */
    async apiAuthSetUserRolesPostRaw(requestParameters: ApiAuthSetUserRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetUserRolesResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Auth/SetUserRoles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetUserRolesRequestDtoToJSON(requestParameters['setUserRolesRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetUserRolesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Change user roles
     */
    async apiAuthSetUserRolesPost(requestParameters: ApiAuthSetUserRolesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetUserRolesResponseDto> {
        const response = await this.apiAuthSetUserRolesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
